name: CI

on:
  push:
    branches: [ branch0 ]
  pull_request:
    branches: [ branch0 ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Set up JDK 11
        id: install-jdk-11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: Setup .NET Core SDK
        id: install-dotnet-50x
        uses: actions/setup-dotnet@v1.8.1
        with:
          dotnet-version: '5.0.x'
          include-prerelease: false

      - name: Checkout
        id: git-checkhot
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Cache SonarCloud packages
        id: cache-sonar
        uses: actions/cache@v1
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        id: install-sonar
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path ./.sonar/scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Setup CodeQL
        id: codeql-setup
        uses: github/codeql-action/init@v1
        with:
          languages: 'csharp'

      - name: Setup Sonar
        id: sonar-setup
        env:
          OPENCOVER_REPORTS_PATH: "./_TMP/*/coverage.opencover.xml"
          COVERAGE_EXCLUSIONS: "**Test*.cs"
        shell: pwsh
        run: >
          ./.sonar/scanner/dotnet-sonarscanner begin
          /k:"throw-if-null_rat.api"
          /o:"throw-if-null"
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
          /d:sonar.host.url="https://sonarcloud.io"
          /d:sonar.cs.opencover.reportsPaths=${{ env.OPENCOVER_REPORTS_PATH }}
          /d:sonar.coverage.exclusions=${{ env.COVERAGE_EXCLUSIONS }}

      - name: Run Tests
        id: tests-run
        uses: rocklan/dotnet-tests-report@master
        env:
          TEST_PROJECT_PATH: ./src/Rat.sln
          TEST_EXTRA_TEST_PARAMETERS: --configuration release --collect:"XPlat Code Coverage" --settings ./src/Rat.Api.Test/runsettings.xml
        with:
          project_path: ${{ env.TEST_PROJECT_PATH }}
          report_name: Test report
          report_title: ${{ env.GITHUB_REPOSITORY }} test results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          gist_name: test_run.md
          gist_badge_label: 'Tests passed: %Counters_passed%/%Counters_total%'
          gist_token: ${{ secrets.GIST_TOKEN }}
          set_check_status_from_test_outcome: true
          fail_build_on_failed_tests: true
          extra_test_parameters: ${{ env.TEST_EXTRA_TEST_PARAMETERS }}

      - name: Run Sonar Analysis
        id: sonar-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        run: ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Codecov
        id: codecov-run
        uses: codecov/codecov-action@v1.5.2
        env:
          OPENCOVER_REPORTS_PATH: "./_TMP/*/coverage.opencover.xml"
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.OPENCOVER_REPORTS_PATH }}
          name: Rat.Api Code Coverage
          fail_ci_if_error: true
          verbose: true

      - name: Run CodeQL Analysis
        id: codeql-run
        uses: github/codeql-action/analyze@v1

      - name: Build and publish Docker container to GitHub
        id: docker-build-publish
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          registry: ghcr.io
          name: throw-if-null/rat.api/rat-api
          username: MirzaMerdovic
          password: ${{ secrets.GITHUB_TOKEN }}
          context: .
          dockerfile: ./Rat.Api/Dockerfile
          workdir: ./src

  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Login to Azure
        id: azure-log-in
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to registry
        id: docker-log-ing
        uses: docker/login-action@v1
        with:
          registry: https://ghcr.io/
          username: MirzaMerdovic
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'rat-api'
          slot-name: 'production'
          publish-profile: ${{ secrets.AZURE_RAT_API_PUBLISH_PROFILE }}
          images: 'ghcr.io/throw-if-null/rat.api/rat-api:latest'

      - name: List web apps
        id: list-web-apps
        run: |
          az webapp list --query "[?state=='Running']"

      - name: Azure CLI script
        id: azure-log-out
        uses: azure/CLI@v1
        with:
          azcliversion: 2.0.72
          inlineScript: |
            az logout
            az cache purge
            az account clear