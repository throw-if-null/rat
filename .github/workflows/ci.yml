name: CI

on:
  push:
    branches: [ branch0 ]
    paths-ignore:
      - 'src/Rat.Database/**'
      - '.github/workflows/sqlserver.yml'
  pull_request:
    branches: [ branch0 ]
    paths:
      - 'src/Rat.Database/**'
      - '.github/workflows/sqlserver.yml'

env:
  DEFAULT_BRANCH: branch0
  VERSION: 0.3.10
  CONTAINER_REGISTRY: ghcr.io

jobs:
  build:
    name: Build assemblies and run the tests
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: Password1!
        ports:
          - 1433:1433

    steps:
      - name: Setup .NET Core SDK
        id: install-dotnet-6xx
        uses: actions/setup-dotnet@v1.8.1
        with:
          dotnet-version: '6.0.x'
          include-prerelease: false

      - name: Checkout
        id: git-checkhot
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup CodeQL
        id: codeql-setup
        uses: github/codeql-action/init@v1
        with:
          languages: 'csharp'

      - name: Restore nuget packages
        id: dotnet-restore
        run: dotnet restore ./src/Rat.sln

      - name: Build
        id: dotnet-build
        run: dotnet build ./src/Rat.sln --configuration Release --no-restore

      # Disable test until DB creation step is added
      #- name: Test
      #  id: dotnet-test
      #  env:
      #    DATABASE_PROJECT_PATH: ${{ github.workspace }}
      #  run: dotnet test ./src/Rat.sln --configuration Release --no-build --collect:"XPlat Code Coverage" --settings ./src/Rat.Api.Test/runsettings.xml

      - name: Run CodeQL Analysis
        id: codeql-run
        uses: github/codeql-action/analyze@v1

      - name: Publish built binaries
        id: dotnet-publish
        run: dotnet publish ./src/Rat.Api/Rat.Api.csproj -o ./published

      - name: Upload publish result
        id: artifacts-upload
        uses: actions/upload-artifact@v2
        with:
          name: 'published-artifact'
          path: published

  docker:
    name: Build and push Docker image
    needs: build
    runs-on: ubuntu-latest

    outputs:
      dockerTag: ${{ env.DOCKER_TAG }}

    steps:
      - name: Checkout
        id: git-checkhot
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download published artifact
        id: artifacts-download
        uses: actions/download-artifact@v2
        with:
          name: 'published-artifact'
          path: ./published

      - name: Setup Docker Buildx
        id: docker-buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug

      - name: Log in to the Container registry
        uses: docker/login-action@v1.14.1
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CONTAINER_REGISTRY_PAT }}

      - name: Prepare docker tag
        id: docker-prepareTags
        run: |
          if [[ $GITHUB_REF != 'refs/heads/${{ env.DEFAULT_BRANCH }}' ]]
          then
            echo "DOCKER_TAG=$(echo $VERSION-$GITHUB_RUN_ID)" >> $GITHUB_ENV
          else
            echo "DOCKER_TAG=$VERSION" >> $GITHUB_ENV
          fi

      - name: Docker tag
        id: docker-printTag
        run: echo "Docker tag ${{ env.DOCKER_TAG }}"

      - name: Set docker image metadata
        id: docker-metadata
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}
          tags: type=semver,pattern={{version}},value=${{ env.DOCKER_TAG }}

      - name: Docker build and publish
        id: docker-buildAndPublish
        uses: docker/build-push-action@v2.10.0
        with:
          context: .
          file: ./src/Rat.Api/Dockerfile
          build-args: PUBLISH_RESULT_PATH=published
          push: true
          tags: ${{ steps.docker-metadata.outputs.tags }}

      - name: Print published docker image tags
        id: print-docker-image-tags
        run: echo '${{ steps.docker-metadata.outputs.tags }}'

  azure:
    name: Deploy to Azure
    needs: Docker
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: 'Deploy container to Azure'
        id: azure-deployContainer
        uses: azure/webapps-deploy@v2
        with:
          app-name: rattus
          publish-profile: ${{ secrets.RAT_AZURE_PUBLISH_PROFILE }}
          images: '${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}:${{needs.docker.outputs.dockerTag}}'

      - name: Login to Azure
        id: azure-loging
        uses: azure/login@v1
        with:
          creds: '${{ secrets.RATCAT_AZURE_CREDENTIALS }}'

      - name: Deploy environment configurations for Azure Web App
        id: azure-deployAppSettings
        uses: azure/appservice-settings@v1
        with:
          app-name: 'rattus'
          app-settings-json: |
            [
              {
                "name": "ASPNETCORE_ENVIRONMENT",
                "value": "Production",
                "slotSetting": false
              },
              {
                "name": "DOCKER_REGISTRY_SERVER_URL",
                "value": "https://index.docker.io/v1",
                "slotSetting": false
              },
              {
                "name": "WEBSITE_HEALTHCHECK_MAXPINGFAILURES",
                "value": "2",
                "slotSetting": false
              },
              {
                "name": "WEBSITE_HTTPLOGGING_RETENTION_DAYS",
                "value": "7",
                "slotSetting": false
              },
              {
                "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
                "value": "false",
                "slotSetting": false
              },
              {
                "name": "DOCKER_IMAGE_TAG",
                "value": "${{ needs.docker.outputs.dockerTag }}",
                "slotSetting": false
              },
              {
                "name": "SqlConnectionFactoryOptions__ConnectionString",
                "value": "${{ secrets.RAT_DATABASE_CONNECTION_STRING }}",
                "slotSettings": false
              }
            ]
