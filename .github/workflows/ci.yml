name: CI

on:
  push:
    branches: [ branch0 ]
  pull_request:
    branches: [ branch0 ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      DEFAULT_BRANCH: branch0
      DEFAULT_DOCKER_IMAGE_TAG: latest
      DOCKER_REPOSITORY: rat

    services:
      #sqlserver:
      #  image: mcr.microsoft.com/mssql/server:2019-latest
      #  env:
      #    ACCEPT_EULA: Y
      #    SA_PASSWORD: Password1!
      #  ports:
      #    - 1433:1433

      postgres:
        image: postgres
        env:
          POSTGRES_USER: sa
          POSTGRES_PASSWORD: Password1!
          POSTGRES_DB: RatDb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Setup .NET Core SDK
        id: install-dotnet-50x
        uses: actions/setup-dotnet@v1.8.1
        with:
          dotnet-version: '6.0.x'
          include-prerelease: false

      - name: Checkout
        id: git-checkhot
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup CodeQL
        id: codeql-setup
        uses: github/codeql-action/init@v1
        with:
          languages: 'csharp'

      - name: Restore nuget packages
        id: dotnet-restore
        run: dotnet restore ./src/Rat.sln

      - name: Build
        id: dotnet-build
        run: dotnet build ./src/Rat.sln --configuration Release --no-restore

      - name: Test
        id: dotnet-test
        env:
          DATABASE_ENGINE: postgres
        run: dotnet test ./src/Rat.sln --configuration Release --no-build --collect:"XPlat Code Coverage" --settings ./src/Rat.Api.Test/runsettings.xml

      - name: Publish
        id: dotnet-publish
        run: dotnet publish ./src/Rat.Api/Rat.Api.csproj -o ./published

      - name: Upload publish result
        uses: actions/upload-artifact@v2
        with:
          name: published
          path: |
            published

      - name: Setup Docker QEMU
        id: docker-qemu
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        id: docker-buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker login
        id: docker-login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build
        id: docker-build
        uses: docker/build-push-action@v2
        env:
          PUBLISH_RESULT_PATH: /published
        with:
          context: .
          file: ./src/Rat.Api/Dockerfile
          build-args: PUBLISH_RESULT_PATH=/published
          push: true
          tags: throwifnull/rat:experimental

      #- name: Run Tests
      #  id: tests-run
      #  uses: rocklan/dotnet-tests-report@master
      #  env:
      #    TEST_PROJECT_PATH: ./src/Rat.sln
      #    TEST_EXTRA_TEST_PARAMETERS: --configuration release --collect:"XPlat Code Coverage" --settings ./src/Rat.Api.Test/runsettings.xml
      #    DATABASE_ENGINE: postgres
      #  with:
      #    project_path: ${{ env.TEST_PROJECT_PATH }}
      #    report_name: Test report
      #    report_title: ${{ env.GITHUB_REPOSITORY }} test results
      #    github_token: ${{ secrets.GITHUB_TOKEN }}
      #    gist_name: test_run.md
      #    gist_badge_label: 'Tests passed: %Counters_passed%/%Counters_total%'
      #    gist_token: ${{ secrets.GIST_TOKEN }}
      #    set_check_status_from_test_outcome: true
      #    fail_build_on_failed_tests: true
      #    extra_test_parameters: ${{ env.TEST_EXTRA_TEST_PARAMETERS }}

      #- name: Run CodeQL Analysis
      #  id: codeql-run
      #  uses: github/codeql-action/analyze@v1

      #- name: Get branch Name
      #  id: get-branch-name
      #  run: echo "BRANCH=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV

      #- name: Set default docker image tag
      #  id: set-default-docker-image-tag
      #  if: env.BRANCH != env.DEFAULT_BRANCH
      #  run: echo "DEFAULT_DOCKER_IMAGE_TAG=$(echo $BRANCH)" >> $GITHUB_ENV

      #- name: Set unique docker image tag
      #  id: set-unique-docker-image-tag
      #  run: echo "DOCKER_TAG=$(echo $GITHUB_RUN_ID)" >> $GITHUB_ENV

      #- name: Build Docker image
      #  id: docker-build-publish
      #  uses: elgohr/Publish-Docker-Github-Action@3.04
      #  with:
      #    name: throwifnull/${{ env.DOCKER_REPOSITORY }}
      #    username: ${{ secrets.DOCKER_USERNAME }}
      #    password: ${{ secrets.DOCKER_PASSWORD }}
      #    context: .
      #    dockerfile: ./Rat.Api/Dockerfile
      #    workdir: ./src
      #    tags: "${{ env.DOCKER_TAG }},${{env.DEFAULT_DOCKER_IMAGE_TAG}}"

      #- name: Print published docker image tags
      #  id: print-docker-image-tags
      #  run: |
      #    echo "Published Docker tags:"
      #    echo $DEFAULT_DOCKER_IMAGE_TAG
      #    echo $DOCKER_TAG
