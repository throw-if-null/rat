name: CI

on:
  push:
    branches: [ branch0 ]
  pull_request:
    branches: [ branch0 ]

env:
  DEFAULT_BRANCH: branch0
  DOCKER_TAG: 0.2.1

jobs:
  build:
    name: Build assemblies and run the tests
    runs-on: ubuntu-latest

    services:
      #sqlserver:
      #  image: mcr.microsoft.com/mssql/server:2019-latest
      #  env:
      #    ACCEPT_EULA: Y
      #    SA_PASSWORD: Password1!
      #  ports:
      #    - 1433:1433

      postgres:
        image: postgres
        env:
          POSTGRES_USER: sa
          POSTGRES_PASSWORD: Password1!
          POSTGRES_DB: RatDb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Setup .NET Core SDK
        id: install-dotnet-50x
        uses: actions/setup-dotnet@v1.8.1
        with:
          dotnet-version: '6.0.x'
          include-prerelease: false

      - name: Checkout
        id: git-checkhot
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup CodeQL
        id: codeql-setup
        uses: github/codeql-action/init@v1
        with:
          languages: 'csharp'

      - name: Restore nuget packages
        id: dotnet-restore
        run: dotnet restore ./src/Rat.sln

      - name: Build
        id: dotnet-build
        run: dotnet build ./src/Rat.sln --configuration Release --no-restore

      - name: Test
        id: dotnet-test
        env:
          DATABASE_ENGINE: postgres
        run: dotnet test ./src/Rat.sln --configuration Release --no-build --collect:"XPlat Code Coverage" --settings ./src/Rat.Api.Test/runsettings.xml

      - name: Run CodeQL Analysis
        id: codeql-run
        uses: github/codeql-action/analyze@v1

      - name: Publish built binaries
        id: dotnet-publish
        run: dotnet publish ./src/Rat.Api/Rat.Api.csproj -o ./published

      - name: Upload publish result
        id: artifacts-upload
        uses: actions/upload-artifact@v2
        with:
          name: 'published-artifact'
          path: published

  docker:
    name: Build and push Docker image
    needs: build
    runs-on: ubuntu-latest

    outputs:
      dockerTag: ${{ steps.docker-prepareTags.outputs.dockerTag }}

    steps:
      - name: Checkout
        id: git-checkhot
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download published artifact
        id: artifacts-download
        uses: actions/download-artifact@v2
        with:
          name: 'published-artifact'
          path: ./published

      - name: Setup Docker Buildx
        id: docker-buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug

      - name: Docker login
        id: docker-login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Prepare docker tags
        id: docker-prepareTags
        run: |
          if [[ $GITHUB_REF != 'refs/tags/'$DEFAULT_BRANCH ]]
          then
            echo "DOCKER_TAG=$(echo $DOCKER_TAG-$GITHUB_RUN_ID)" >> $GITHUB_ENV
          fi

          echo "Docker tag $DOCKER_TAG"
          echo "::set-output name=dockerTag::$DOCKER_TAG"

      - name: Set docker image metadata
        id: docker-metadata
        uses: docker/metadata-action@v3
        with:
          images: throwifnull/rat
          tags: |
            type=semver,pattern={{version}},value=${{ env.DOCKER_TAG }}

      - name: Docker build and publish
        id: docker-buildAndPublish
        uses: docker/build-push-action@v2

        with:
          context: .
          file: ./src/Rat.Api/Dockerfile
          build-args: PUBLISH_RESULT_PATH=published
          push: true
          tags: ${{ steps.docker-metadata.outputs.tags }}

      - name: Print published docker image tags
        id: print-docker-image-tags
        run: echo '${{ steps.docker-metadata.outputs.tags }}'


  azure:
    name: Deploy to Azure
    needs: Docker
    runs-on: ubuntu-latest
    #if: github.event_name != 'pull_request'

    steps:
      - name: 'Deploy container to Azure'
        id: azure-deployContainer
        uses: azure/webapps-deploy@v2
        with:
          app-name: rattus
          publish-profile: ${{ secrets.RAT_AZURE_PUBLISH_PROFILE }}
          images: 'docker.io/throwifnull/rat:${{needs.docker.outputs.dockerTag}}'

      - name: Login to Azure
        id: azure-loging
        uses: azure/login@v1
        with:
          creds: '${{ secrets.RATCAT_AZURE_CREDENTIALS }}'

      - name: Deploy environment configurations for Azure Web App
        id: azure-deployAppSettings
        uses: azure/appservice-settings@v1
        with:
          app-name: 'rattus'
          connection-strings-json: |
            [
              {
                "name": "RatDb",
                "value": "${{ secrets.RAT_DATABASE_CONNECTION_STRING }}",
                "type": "Custom",
                "slotSetting": false
              }
            ]
          app-settings-json: |
            [
              {
                "name": "ASPNETCORE_ENVIRONMENT",
                "value": "Production",
                "slotSetting": false
              },
              {
                "name": "DOCKER_REGISTRY_SERVER_URL",
                "value": "https://index.docker.io/v1",
                "slotSetting": false
              },
              {
                "name": "WEBSITE_HEALTHCHECK_MAXPINGFAILURES",
                "value": "2",
                "slotSetting": false
              },
              {
                "name": "WEBSITE_HTTPLOGGING_RETENTION_DAYS",
                "value": "7",
                "slotSetting": false
              },
              {
                "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
                "value": "false",
                "slotSetting": false
              }
            ]
